<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ðŸ††rite Once</title>
  
  
  <link href="/dev-blog/atom.xml" rel="self"/>
  
  <link href="https://nooballday.github.io/dev-blog/"/>
  <updated>2017-12-16T16:06:57.549Z</updated>
  <id>https://nooballday.github.io/dev-blog/</id>
  
  <author>
    <name>Achmad Naufal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>realm-java</title>
    <link href="https://nooballday.github.io/dev-blog/2017/12/16/realm-java/"/>
    <id>https://nooballday.github.io/dev-blog/2017/12/16/realm-java/</id>
    <published>2017-12-16T16:06:57.000Z</published>
    <updated>2017-12-16T16:06:57.549Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Using Realm.io in you Android Project</title>
    <link href="https://nooballday.github.io/dev-blog/2017/12/16/realm-io-java-1/"/>
    <id>https://nooballday.github.io/dev-blog/2017/12/16/realm-io-java-1/</id>
    <published>2017-12-16T11:19:49.000Z</published>
    <updated>2017-12-16T16:03:49.512Z</updated>
    
    <content type="html"><![CDATA[<p>For so many years SQLite has been numer 1 choice for local database, despite some <a href="http://objectbox.io/sqlite-alternatives/" target="_blank" rel="noopener">alternatives</a>, SQLite has manage its way to developerâ€™s heart. There are so many reasons to use a local database. One of the newest use case of why you would implement offline database in your application is if you are using <a href="http://nosql-database.org" target="_blank" rel="noopener">NoSQL</a> database.  NoSQL doesnâ€™t support query (as it says in the name) for when you fetch data from your server, There are so many ways to do it one of them is using <a href="https://www.algolia.com" target="_blank" rel="noopener">Algolia</a> which is a search engine API, or using Local database which i will show you a little how to do just that.<br><strong><h1>Realm.Io</h1></strong></p><p>Realm.Io or <a href="https://realm.io" target="_blank" rel="noopener">realm</a> is a database that can be used across platforms with so many powerful features, one of them you can sync your userâ€™s offline data with other user seamlessly. iâ€™ve personally use realm java for my work but its not limited only in java you can also use it in javascript , swift, and .NET. without further ado lets get right to it.</p><h3> Prerequisite</h3><br>We will build a simple news app which user can read Top 10 news while online, and if the user has no internet connection it will fecth previous news that has been stored in realmdb.<br><br>To do that we will use a third party API, NewsApi. Go to <a href="https://newsapi.org" target="_blank" rel="noopener">NewsAPI</a> and get your API Key.<br><br><h3>Installation</h3><p>Java provides you an easy way to install all dependencies that you need for you application, thatâ€™s right using Gradle, so weâ€™ll use it today for our project.</p><p>Now go ahead to your Projects level <code>build.gradle</code> and edit it as you seen below : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">"io.realm:realm-gradle-plugin:4.3.1"</span> <span class="comment">//add this line</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and now go to your App level <code>build.gradle</code> and add this code to the bottom of the file.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;realm-android&apos;</span><br></pre></td></tr></table></figure><p>For the full detail on installation you can read the official realm <a href="https://realm.io/docs/java/latest/" target="_blank" rel="noopener">docs</a>.<br>Great work, now youâ€™ve add realm to your application, lets move forward !</p><p></p><h3>Creating Activity in Android</h3><br>For the sake of simplicity, i will assume that youâ€™ve already installed Android Studio in you computer and know how to create a project, if you donâ€™t know check this <a href="https://www.javaworld.com/article/3095406/android/android-studio-for-beginners-part-1-installation-and-setup.html" target="_blank" rel="noopener">how to</a> here for installation and setup. If youâ€™ve finished creating a new project go ahead and create a new Activity called <code>NewsPage</code>.<p></p><p></p><h3>Get Busy Coding</h3><br>Congratulations! Youâ€™ve done the hard part, now we get to the easy part which is building the application. The flow of the application goes like this<p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User opens the app -&gt; the app check if there is internet connection -&gt; (if yes)fetch news from API, check if data already exist and save it to realmdb -&gt; (if no) Show all available news from realm db</span><br></pre></td></tr></table></figure><p>If you have the time to read the realm docs, there is one thing that you have to do to start building your realm app is to add <code>Realm.init(context)</code> when your app is starting so we will do just that in our <code>NewsPage.java</code> file.</p><p></p><h4>The View</h4><br>Weâ€™ve got the realm ready to roll in our app, so lets go and make our view, in this case our Activityâ€™s XML file. we will be using Recyclerview to display the list of news that we got from our API. Before we will able to use RecyclerView in our App we need to add androidâ€™s design library in our App level gradle  like this :<p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:design:26.0.0-alpha1&apos;</span><br></pre></td></tr></table></figure><p>Our <code>activity_news_page.xml</code> will look like this :</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.personal.naufal.newsapiexample.NewsPage"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/rv_news_list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now back to <code>NewsPage.java</code>, weâ€™ve initiate realm in our application, now we need to call API, to do that we will be using Retrofit, one of the most well known library to handle http communication in Android. We will add <a href="http://square.github.io/retrofit/" target="_blank" rel="noopener">retrofit</a> dependency in our project, so once again go to your App level <code>build.gradle</code> and add this :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.squareup.retrofit2:retrofit:2.3.0&apos;</span><br></pre></td></tr></table></figure><p>One key aspect to develop android app is maintaining your API, i personally use tools such as <a href="insomnia.rest">Insomnia</a> to test my API, it will help you save a lot of time. go and check if you are able to call API from it. Good ? okay lets make an API call from our android app.</p><p>Retrofit requiring you to create interface to call specific API in your URL, so lets create it and name it <code>Networkservice.java</code> which will contains interface to call our API, so go ahead and make one like this :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NetworkService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"v2/top-headlines?sources=bbc-news&amp;apiKey&#125;"</span>)</span><br><span class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">getNews</span><span class="params">(@Query(<span class="string">"source"</span>)</span> String source, @<span class="title">Query</span><span class="params">(<span class="string">"apiKey"</span>)</span> String key)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You will notice that there is <code>@Query</code> parameter, that is how retrofit define your API parameter if you are using <code>GET</code> method.</p><p>Okay, Interface? Checked! lets get back to business<br>Add this method in NewsPage.java :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fetchAPI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">               .baseUrl(<span class="string">"https://newsapi.org/"</span>)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       retrofit2.Call&lt;okhttp3.ResponseBody&gt; service = retrofit.create(NetworkService.class).getNews(<span class="string">"bbc-news"</span>, <span class="string">"b6bf002748e1447caed5e0dbb2730c04"</span>);</span><br><span class="line"></span><br><span class="line">       service.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   Log.v(<span class="string">"response"</span>, response.body().string());</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Call this method in your onCreate( ) method, and before you try to run you application add <code>INTERNET</code> permission to your <code>manifest.xml</code> file like so :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure><p>Now Run it !</p><p>If you see this line in your Android Monitor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V/response: &#123;&quot;status&quot;:&quot;ok&quot;,&quot;totalResults&quot;:10,&quot;articles&quot;:[&#123;&quot;source&quot;:&#123;&quot;id&quot;:&quot;bbc-news&quot;,&quot;name&quot;:&quot;BBC News&quot;&#125;,&quot;author&quot;:&quot;BBC News&quot;,&quot;title .....</span><br></pre></td></tr></table></figure><p>Congratulation! youâ€™ve successfuly call an API! give yourself a pat on your back. Here comes the good part, inserting data to realmdb. its quite easy really, we just need to parse our JSON that we get earlier and set it to our model class. now create a file and name it <code>NewsModel.java</code> and in it we will define variables for our news data.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsModel</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title, desc, urlToImage, publishedAt, author;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrlToImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> urlToImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrlToImage</span><span class="params">(String urlToImage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.urlToImage = urlToImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPublishedAt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> publishedAt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublishedAt</span><span class="params">(String publishedAt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publishedAt = publishedAt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>All set now lets actually insert it to realmdb, add this method to <code>NewsPage.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertDataToRealm</span><span class="params">(JSONArray dataArray)</span> <span class="keyword">throws</span> JSONException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; dataArray.length(); i++)&#123;</span><br><span class="line">            <span class="comment">//getting the data from JSON Array</span></span><br><span class="line">            JSONObject article = dataArray.getJSONObject(i);</span><br><span class="line">            String author = article.getString(<span class="string">"author"</span>);</span><br><span class="line">            String title = article.getString(<span class="string">"title"</span>);</span><br><span class="line">            String description = article.getString(<span class="string">"description"</span>);</span><br><span class="line">            String urlToImage = article.getString(<span class="string">"description"</span>);</span><br><span class="line">            String publishedAt = article.getString(<span class="string">"publishedAt"</span>);</span><br><span class="line"></span><br><span class="line">            realm.beginTransaction();</span><br><span class="line">            <span class="comment">//create model object that extends to RealmObject to store our data</span></span><br><span class="line">            NewsModel model = realm.createObject(NewsModel.class);</span><br><span class="line">            model.setAuthor(author);</span><br><span class="line">            model.setTitle(title);</span><br><span class="line">            model.setDesc(description);</span><br><span class="line">            model.setUrlToImage(urlToImage);</span><br><span class="line">            model.setPublishedAt(publishedAt);</span><br><span class="line">            <span class="comment">//commiting to realm db</span></span><br><span class="line">            realm.commitTransaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>You will notice that this method take one parameter and that is <code>JSONArray</code> which we get from previous fetch, get it from <code>onResponse</code> callback inside our call, modify it so our  <code>onResponse</code>  inside <code>fetchAPI()</code> method looks like this :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String responseBody =  response.body().string();</span><br><span class="line">                    JSONObject responseObject = <span class="keyword">new</span> JSONObject(responseBody);</span><br><span class="line">                    JSONArray responseArray = responseObject.getJSONArray(<span class="string">"articles"</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//parse data</span></span><br><span class="line">                    insertDataToRealm(responseArray);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException | JSONException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>Good, inserting data to realm? done!.</p><p>Now lets move on to the next phase adding data to your <code>RecyclerView</code>.</p><p>First we need to make adapter for it, so lets use create an adapterclass and name it <code>NewsAdapter.java</code>, this class will contain this :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">NewsAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;NewsModel&gt; modelList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Context _context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewsAdapter</span><span class="params">(List&lt;NewsModel&gt; modelList, Context _context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.modelList = modelList;</span><br><span class="line">        <span class="keyword">this</span>._context = _context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View v = LayoutInflater.from(_context).inflate(R.layout.row_news, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        NewsModel currentData = modelList.get(position);</span><br><span class="line">        holder.mNewsAuthor.setText(currentData.getAuthor());</span><br><span class="line">        holder.mNewsTitle.setText(currentData.getTitle());</span><br><span class="line">        holder.mNewsDesc.setText(currentData.getDesc());</span><br><span class="line"></span><br><span class="line">        Picasso.with(_context)</span><br><span class="line">                .load(currentData.getUrlToImage())</span><br><span class="line">                .error(R.drawable.no_image_placeholder)</span><br><span class="line">                .placeholder(R.drawable.no_image_placeholder)</span><br><span class="line">                .into(holder.mNewsImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> modelList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BindView</span>(R.id.news_image)</span><br><span class="line">        ImageView mNewsImage;</span><br><span class="line">        <span class="meta">@BindView</span>(R.id.news_author)</span><br><span class="line">        TextView mNewsAuthor;</span><br><span class="line">        <span class="meta">@BindView</span>(R.id.news_desc)</span><br><span class="line">        TextView mNewsDesc;</span><br><span class="line">        <span class="meta">@BindView</span>(R.id.news_title)</span><br><span class="line">        TextView mNewsTitle;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            ButterKnife.bind(<span class="keyword">this</span>, itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Okay so we get our model, we inserted our data and the adapter class is ready, lets move to linking the data with the list.</p><p>Create one method that called <code>addDataToRv( )</code> this method will insert data from db to our adapter and ultimately populate our list. call it after we committing data to realm inside <code>insertDataToRealm( )</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addDataToRv</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//get all data that available</span></span><br><span class="line">        RealmResults&lt;NewsModel&gt; newsModels = realm.where(NewsModel.class).findAll();</span><br><span class="line">        <span class="comment">//initialize our adapter</span></span><br><span class="line">        adapter = <span class="keyword">new</span> NewsAdapter(<span class="keyword">new</span> ArrayList&lt;&gt;(newsModels), <span class="keyword">this</span>);</span><br><span class="line">        mRvNewsList.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line">        mRvNewsList.setAdapter(adapter);</span><br><span class="line">        <span class="comment">//notify the adapter that we have new data</span></span><br><span class="line">        adapter.notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Aaaaaaand youâ€™re done!</p><p>All the source code will be posted <a href="https://github.com/nooballday/realm-io-example" target="_blank" rel="noopener">here</a> feel free to ask a question via email.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For so many years SQLite has been numer 1 choice for local database, despite some &lt;a href=&quot;http://objectbox.io/sqlite-alternatives/&quot; targ
      
    
    </summary>
    
    
      <category term="java" scheme="https://nooballday.github.io/dev-blog/tags/java/"/>
    
      <category term="realm" scheme="https://nooballday.github.io/dev-blog/tags/realm/"/>
    
      <category term="android" scheme="https://nooballday.github.io/dev-blog/tags/android/"/>
    
  </entry>
  
</feed>
