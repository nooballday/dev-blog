{"meta":{"title":"ðŸ††rite Once","subtitle":null,"description":null,"author":"Achmad Naufal","url":"https://nooballday.github.io/dev-blog"},"pages":[],"posts":[{"title":"Using Realm.io in you Android Project","slug":"realm-java","date":"2017-12-16T11:19:49.000Z","updated":"2017-12-16T16:14:02.465Z","comments":true,"path":"2017/12/16/realm-java/","link":"","permalink":"https://nooballday.github.io/dev-blog/2017/12/16/realm-java/","excerpt":"","text":"For so many years SQLite has been numer 1 choice for local database, despite some alternatives, SQLite has manage its way to developerâ€™s heart. There are so many reasons to use a local database. One of the newest use case of why you would implement offline database in your application is if you are using NoSQL database. NoSQL doesnâ€™t support query (as it says in the name) for when you fetch data from your server, There are so many ways to do it one of them is using Algolia which is a search engine API, or using Local database which i will show you a little how to do just that.Realm.Io Realm.Io or realm is a database that can be used across platforms with so many powerful features, one of them you can sync your userâ€™s offline data with other user seamlessly. iâ€™ve personally use realm java for my work but its not limited only in java you can also use it in javascript , swift, and .NET. without further ado lets get right to it. PrerequisiteWe will build a simple news app which user can read Top 10 news while online, and if the user has no internet connection it will fecth previous news that has been stored in realmdb.To do that we will use a third party API, NewsApi. Go to NewsAPI and get your API Key.Installation Java provides you an easy way to install all dependencies that you need for you application, thatâ€™s right using Gradle, so weâ€™ll use it today for our project. Now go ahead to your Projects level build.gradle and edit it as you seen below : 12345678buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; classpath \"io.realm:realm-gradle-plugin:4.3.1\" //add this line &#125;&#125; and now go to your App level build.gradle and add this code to the bottom of the file. 1apply plugin: &apos;realm-android&apos; For the full detail on installation you can read the official realm docs.Great work, now youâ€™ve add realm to your application, lets move forward ! Creating Activity in AndroidFor the sake of simplicity, i will assume that youâ€™ve already installed Android Studio in you computer and know how to create a project, if you donâ€™t know check this how to here for installation and setup. If youâ€™ve finished creating a new project go ahead and create a new Activity called NewsPage. Get Busy CodingCongratulations! Youâ€™ve done the hard part, now we get to the easy part which is building the application. The flow of the application goes like this 1User opens the app -&gt; the app check if there is internet connection -&gt; (if yes)fetch news from API, check if data already exist and save it to realmdb -&gt; (if no) Show all available news from realm db If you have the time to read the realm docs, there is one thing that you have to do to start building your realm app is to add Realm.init(context) when your app is starting so we will do just that in our NewsPage.java file. The ViewWeâ€™ve got the realm ready to roll in our app, so lets go and make our view, in this case our Activityâ€™s XML file. we will be using Recyclerview to display the list of news that we got from our API. Before we will able to use RecyclerView in our App we need to add androidâ€™s design library in our App level gradle like this : 1compile &apos;com.android.support:design:26.0.0-alpha1&apos; Our activity_news_page.xml will look like this : 1234567891011121314&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" tools:context=\"com.personal.naufal.newsapiexample.NewsPage\"&gt;&lt;android.support.v7.widget.RecyclerView android:id=\"@+id/rv_news_list\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\"/&gt;&lt;/RelativeLayout&gt; Now back to NewsPage.java, weâ€™ve initiate realm in our application, now we need to call API, to do that we will be using Retrofit, one of the most well known library to handle http communication in Android. We will add retrofit dependency in our project, so once again go to your App level build.gradle and add this : 1compile &apos;com.squareup.retrofit2:retrofit:2.3.0&apos; One key aspect to develop android app is maintaining your API, i personally use tools such as Insomnia to test my API, it will help you save a lot of time. go and check if you are able to call API from it. Good ? okay lets make an API call from our android app. Retrofit requiring you to create interface to call specific API in your URL, so lets create it and name it Networkservice.java which will contains interface to call our API, so go ahead and make one like this : 1234public interface NetworkService &#123; @GET(\"v2/top-headlines?sources=bbc-news&amp;apiKey&#125;\") Call&lt;ResponseBody&gt; getNews(@Query(\"source\") String source, @Query(\"apiKey\") String key);&#125; You will notice that there is @Query parameter, that is how retrofit define your API parameter if you are using GET method. Okay, Interface? Checked! lets get back to businessAdd this method in NewsPage.java : 12345678910111213141516171819202122232425public void fetchAPI() &#123; Retrofit retrofit = new Retrofit.Builder() .baseUrl(\"https://newsapi.org/\") .build(); retrofit2.Call&lt;okhttp3.ResponseBody&gt; service = retrofit.create(NetworkService.class).getNews(\"bbc-news\", \"b6bf002748e1447caed5e0dbb2730c04\"); service.enqueue(new Callback&lt;ResponseBody&gt;() &#123; @Override public void onResponse(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response) &#123; try &#123; Log.v(\"response\", response.body().string()); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; @Override public void onFailure(Call&lt;ResponseBody&gt; call, Throwable t) &#123; &#125; &#125;); &#125; Call this method in your onCreate( ) method, and before you try to run you application add INTERNET permission to your manifest.xml file like so : 1&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; Now Run it ! If you see this line in your Android Monitor 1V/response: &#123;&quot;status&quot;:&quot;ok&quot;,&quot;totalResults&quot;:10,&quot;articles&quot;:[&#123;&quot;source&quot;:&#123;&quot;id&quot;:&quot;bbc-news&quot;,&quot;name&quot;:&quot;BBC News&quot;&#125;,&quot;author&quot;:&quot;BBC News&quot;,&quot;title ..... Congratulation! youâ€™ve successfuly call an API! give yourself a pat on your back. Here comes the good part, inserting data to realmdb. its quite easy really, we just need to parse our JSON that we get earlier and set it to our model class. now create a file and name it NewsModel.java and in it we will define variables for our news data. 1234567891011121314151617181920212223242526272829303132333435363738394041424344public class NewsModel extends RealmObject &#123; private String title, desc, urlToImage, publishedAt, author; public String getTitle() &#123; return title; &#125; public void setTitle(String title) &#123; this.title = title; &#125; public String getDesc() &#123; return desc; &#125; public void setDesc(String desc) &#123; this.desc = desc; &#125; public String getUrlToImage() &#123; return urlToImage; &#125; public void setUrlToImage(String urlToImage) &#123; this.urlToImage = urlToImage; &#125; public String getPublishedAt() &#123; return publishedAt; &#125; public void setPublishedAt(String publishedAt) &#123; this.publishedAt = publishedAt; &#125; public String getAuthor() &#123; return author; &#125; public void setAuthor(String author) &#123; this.author = author; &#125;&#125; All set now lets actually insert it to realmdb, add this method to NewsPage.java 12345678910111213141516171819202122private void insertDataToRealm(JSONArray dataArray) throws JSONException &#123; for (int i = 0 ; i &lt; dataArray.length(); i++)&#123; //getting the data from JSON Array JSONObject article = dataArray.getJSONObject(i); String author = article.getString(\"author\"); String title = article.getString(\"title\"); String description = article.getString(\"description\"); String urlToImage = article.getString(\"description\"); String publishedAt = article.getString(\"publishedAt\"); realm.beginTransaction(); //create model object that extends to RealmObject to store our data NewsModel model = realm.createObject(NewsModel.class); model.setAuthor(author); model.setTitle(title); model.setDesc(description); model.setUrlToImage(urlToImage); model.setPublishedAt(publishedAt); //commiting to realm db realm.commitTransaction(); &#125; &#125; You will notice that this method take one parameter and that is JSONArray which we get from previous fetch, get it from onResponse callback inside our call, modify it so our onResponse inside fetchAPI() method looks like this : 12345678910111213@Override public void onResponse(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response) &#123; try &#123; String responseBody = response.body().string(); JSONObject responseObject = new JSONObject(responseBody); JSONArray responseArray = responseObject.getJSONArray(\"articles\"); //parse data insertDataToRealm(responseArray); &#125; catch (IOException | JSONException e) &#123; e.printStackTrace(); &#125; &#125; Good, inserting data to realm? done!. Now lets move on to the next phase adding data to your RecyclerView. First we need to make adapter for it, so lets use create an adapterclass and name it NewsAdapter.java, this class will contain this : 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class NewsAdapter extends RecyclerView.Adapter&lt;NewsAdapter.ViewHolder&gt; &#123; private List&lt;NewsModel&gt; modelList = new ArrayList&lt;&gt;(); private Context _context; public NewsAdapter(List&lt;NewsModel&gt; modelList, Context _context) &#123; this.modelList = modelList; this._context = _context; &#125; @Override public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; View v = LayoutInflater.from(_context).inflate(R.layout.row_news, parent, false); return new ViewHolder(v); &#125; @Override public void onBindViewHolder(ViewHolder holder, int position) &#123; NewsModel currentData = modelList.get(position); holder.mNewsAuthor.setText(currentData.getAuthor()); holder.mNewsTitle.setText(currentData.getTitle()); holder.mNewsDesc.setText(currentData.getDesc()); Picasso.with(_context) .load(currentData.getUrlToImage()) .error(R.drawable.no_image_placeholder) .placeholder(R.drawable.no_image_placeholder) .into(holder.mNewsImage); &#125; @Override public int getItemCount() &#123; return modelList.size(); &#125; public class ViewHolder extends RecyclerView.ViewHolder &#123; @BindView(R.id.news_image) ImageView mNewsImage; @BindView(R.id.news_author) TextView mNewsAuthor; @BindView(R.id.news_desc) TextView mNewsDesc; @BindView(R.id.news_title) TextView mNewsTitle; public ViewHolder(View itemView) &#123; super(itemView); ButterKnife.bind(this, itemView); &#125; &#125;&#125; Okay so we get our model, we inserted our data and the adapter class is ready, lets move to linking the data with the list. Create one method that called addDataToRv( ) this method will insert data from db to our adapter and ultimately populate our list. call it after we committing data to realm inside insertDataToRealm( ) 12345678910private void addDataToRv()&#123; //get all data that available RealmResults&lt;NewsModel&gt; newsModels = realm.where(NewsModel.class).findAll(); //initialize our adapter adapter = new NewsAdapter(new ArrayList&lt;&gt;(newsModels), this); mRvNewsList.setLayoutManager(new LinearLayoutManager(this)); mRvNewsList.setAdapter(adapter); //notify the adapter that we have new data adapter.notifyDataSetChanged(); &#125; Aaaaaaand youâ€™re done! All the source code will be posted here feel free to ask a question via email.","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://nooballday.github.io/dev-blog/tags/java/"},{"name":"realm","slug":"realm","permalink":"https://nooballday.github.io/dev-blog/tags/realm/"},{"name":"android","slug":"android","permalink":"https://nooballday.github.io/dev-blog/tags/android/"}]}]}