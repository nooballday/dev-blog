<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Using Realm.io in you Android Project]]></title>
      <url>/dev-blog/2017/12/16/realm-io-java/</url>
      <content type="html"><![CDATA[<p>For so many years SQLite has been numer 1 choice for local database, despite some <a href="http://objectbox.io/sqlite-alternatives/" target="_blank" rel="noopener">alternatives</a>, SQLite has manage its way to developer’s heart. There are so many reasons to use a local database. One of the newest use case of why you would implement offline database in your application is if you are using <a href="http://nosql-database.org" target="_blank" rel="noopener">NoSQL</a> database.  NoSQL doesn’t support query (as it says in the name) for when you fetch data from your server, There are so many ways to do it one of them is using <a href="https://www.algolia.com" target="_blank" rel="noopener">Algolia</a> which is a search engine API, or using Local database which i will show you a little how to do just that.<br><strong><h1>Realm.Io</h1></strong></p>
<p>Realm.Io or <a href="https://realm.io" target="_blank" rel="noopener">realm</a> is a database that can be used across platforms with so many powerful features, one of them you can sync your user’s offline data with other user seamlessly. i’ve personally use realm java for my work but its not limited only in java you can also use it in javascript , swift, and .NET. without further ado lets get right to it.</p>
<a id="more"></a>
<h3> Prerequisite</h3><br>We will build a simple news app which user can read Top 10 news while online, and if the user has no internet connection it will fecth previous news that has been stored in realmdb.<br><br>To do that we will use a third party API, NewsApi. Go to <a href="https://newsapi.org" target="_blank" rel="noopener">NewsAPI</a> and get your API Key.<br><br><h3>Installation</h3>

<p>Java provides you an easy way to install all dependencies that you need for you application, that’s right using Gradle, so we’ll use it today for our project.</p>
<p>Now go ahead to your Projects level <code>build.gradle</code> and edit it as you seen below : </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &quot;io.realm:realm-gradle-plugin:4.3.1&quot; //add this line</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>and now go to your App level <code>build.gradle</code> and add this code to the bottom of the file.</p>
<pre><code>apply plugin: &apos;realm-android&apos;
</code></pre><p>For the full detail on installation you can read the official realm <a href="https://realm.io/docs/java/latest/" target="_blank" rel="noopener">docs</a>.<br>Great work, now you’ve add realm to your application, lets move forward !</p>
<p></p><h3>Creating Activity in Android</h3><br>For the sake of simplicity, i will assume that you’ve already installed Android Studio in you computer and know how to create a project, if you don’t know check this <a href="https://www.javaworld.com/article/3095406/android/android-studio-for-beginners-part-1-installation-and-setup.html" target="_blank" rel="noopener">how to</a> here for installation and setup. If you’ve finished creating a new project go ahead and create a new Activity called <code>NewsPage</code>.<p></p>
<p></p><h3>Get Busy Coding</h3><br>Congratulations! You’ve done the hard part, now we get to the easy part which is building the application. The flow of the application goes like this<p></p>
<p><code>User opens the app -&gt; the app check if there is internet connection -&gt; (if yes)fetch news from API, check if data already exist and save it to realmdb -&gt; (if no) Show all available news from realm db</code></p>
<p>If you have the time to read the realm docs, there is one thing that you have to do to start building your realm app is to add <code>Realm.init(context)</code> when your app is starting so we will do just that in our <code>NewsPage.java</code> file.</p>
<p></p><h4>The View</h4><br>We’ve got the realm ready to roll in our app, so lets go and make our view, in this case our Activity’s XML file. we will be using Recyclerview to display the list of news that we got from our API. Before we will able to use RecyclerView in our App we need to add android’s design library in our App level gradle  like this :<p></p>
<p><code>compile &#39;com.android.support:design:26.0.0-alpha1&#39;</code></p>
<p>Our <code>activity_news_page.xml</code> will look like this :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;com.personal.naufal.newsapiexample.NewsPage&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=&quot;@+id/rv_news_list&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>
<p>Now back to <code>NewsPage.java</code>, we’ve initiate realm in our application, now we need to call API, to do that we will be using Retrofit, one of the most well known library to handle http communication in Android. We will add <a href="http://square.github.io/retrofit/" target="_blank" rel="noopener">retrofit</a> dependency in our project, so once again go to your App level <code>build.gradle</code> and add this :<br><code>compile &#39;com.squareup.retrofit2:retrofit:2.3.0&#39;</code>.</p>
<p>One key aspect to develop android app is maintaining your API, i personally use tools such as <a href="insomnia.rest">Insomnia</a> to test my API, it will help you save a lot of time. go and check if you are able to call API from it. Good ? okay lets make an API call from our android app.</p>
<p>Retrofit requiring you to create interface to call specific API in your URL, so lets create it and name it <code>Networkservice.java</code> which will contains interface to call our API, so go ahead and make one like this :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface NetworkService &#123;</span><br><span class="line">    @GET(&quot;v2/top-headlines?sources=bbc-news&amp;apiKey&#125;&quot;)</span><br><span class="line">    Call&lt;ResponseBody&gt; getNews(@Query(&quot;source&quot;) String source, @Query(&quot;apiKey&quot;) String key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You will notice that there is <code>@Query</code> parameter, that is how retrofit define your API parameter if you are using <code>GET</code> method.</p>
<p>Okay, Interface? Checked! lets get back to business<br>Add this method in NewsPage.java :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void fetchAPI() &#123;</span><br><span class="line">       Retrofit retrofit = new Retrofit.Builder()</span><br><span class="line">               .baseUrl(&quot;https://newsapi.org/&quot;)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       retrofit2.Call&lt;okhttp3.ResponseBody&gt; service = retrofit.create(NetworkService.class).getNews(&quot;bbc-news&quot;, &quot;b6bf002748e1447caed5e0dbb2730c04&quot;);</span><br><span class="line"></span><br><span class="line">       service.enqueue(new Callback&lt;ResponseBody&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onResponse(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response) &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">                   Log.v(&quot;response&quot;, response.body().string());</span><br><span class="line">               &#125; catch (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onFailure(Call&lt;ResponseBody&gt; call, Throwable t) &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>Call this method in your onCreate( ) method, and before you try to run you application add <code>INTERNET</code> permission to your <code>manifest.xml</code> file like so :<br><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</code></p>
<p>Now Run it !</p>
<p>If you see this line in your Android Monitor<br><code>V/response: {&quot;status&quot;:&quot;ok&quot;,&quot;totalResults&quot;:10,&quot;articles&quot;:[{&quot;source&quot;:{&quot;id&quot;:&quot;bbc-news&quot;,&quot;name&quot;:&quot;BBC News&quot;},&quot;author&quot;:&quot;BBC News&quot;,&quot;title .....</code></p>
<p>Congratulation! you’ve successfuly call an API! give yourself a pat on your back. Here comes the good part, inserting data to realmdb. its quite easy really, we just need to parse our JSON that we get earlier and set it to our model class. now create a file and name it <code>NewsModel.java</code> and in it we will define variables for our news data.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class NewsModel extends RealmObject &#123;</span><br><span class="line"></span><br><span class="line">    private String title, desc, urlToImage, publishedAt, author;</span><br><span class="line"></span><br><span class="line">    public String getTitle() &#123;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTitle(String title) &#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDesc() &#123;</span><br><span class="line">        return desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDesc(String desc) &#123;</span><br><span class="line">        this.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUrlToImage() &#123;</span><br><span class="line">        return urlToImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUrlToImage(String urlToImage) &#123;</span><br><span class="line">        this.urlToImage = urlToImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPublishedAt() &#123;</span><br><span class="line">        return publishedAt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPublishedAt(String publishedAt) &#123;</span><br><span class="line">        this.publishedAt = publishedAt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAuthor() &#123;</span><br><span class="line">        return author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAuthor(String author) &#123;</span><br><span class="line">        this.author = author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>All set now lets actually insert it to realmdb, add this method to <code>NewsPage.java</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void insertDataToRealm(JSONArray dataArray) throws JSONException &#123;</span><br><span class="line">        for (int i = 0 ; i &lt; dataArray.length(); i++)&#123;</span><br><span class="line">            //getting the data from JSON Array</span><br><span class="line">            JSONObject article = dataArray.getJSONObject(i);</span><br><span class="line">            String author = article.getString(&quot;author&quot;);</span><br><span class="line">            String title = article.getString(&quot;title&quot;);</span><br><span class="line">            String description = article.getString(&quot;description&quot;);</span><br><span class="line">            String urlToImage = article.getString(&quot;description&quot;);</span><br><span class="line">            String publishedAt = article.getString(&quot;publishedAt&quot;);</span><br><span class="line"></span><br><span class="line">            realm.beginTransaction();</span><br><span class="line">            //create model object that extends to RealmObject to store our data</span><br><span class="line">            NewsModel model = realm.createObject(NewsModel.class);</span><br><span class="line">            model.setAuthor(author);</span><br><span class="line">            model.setTitle(title);</span><br><span class="line">            model.setDesc(description);</span><br><span class="line">            model.setUrlToImage(urlToImage);</span><br><span class="line">            model.setPublishedAt(publishedAt);</span><br><span class="line">            //commiting to realm db</span><br><span class="line">            realm.commitTransaction();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>You will notice that this method take one parameter and that is <code>JSONArray</code> which we get from previous fetch, get it from <code>onResponse</code> callback inside our call, modify it so our  <code>onResponse</code>  inside <code>fetchAPI()</code> method looks like this :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">            public void onResponse(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    String responseBody =  response.body().string();</span><br><span class="line">                    JSONObject responseObject = new JSONObject(responseBody);</span><br><span class="line">                    JSONArray responseArray = responseObject.getJSONArray(&quot;articles&quot;);</span><br><span class="line"></span><br><span class="line">                    //parse data</span><br><span class="line">                    insertDataToRealm(responseArray);</span><br><span class="line">                &#125; catch (IOException | JSONException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>Good, inserting data to realm? done!.</p>
<p>Now lets move on to the next phase adding data to your <code>RecyclerView</code>.</p>
<p>First we need to make adapter for it, so lets use create an adapterclass and name it <code>NewsAdapter.java</code>, this class will contain this :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class NewsAdapter extends RecyclerView.Adapter&lt;NewsAdapter.ViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;NewsModel&gt; modelList = new ArrayList&lt;&gt;();</span><br><span class="line">    private Context _context;</span><br><span class="line"></span><br><span class="line">    public NewsAdapter(List&lt;NewsModel&gt; modelList, Context _context) &#123;</span><br><span class="line">        this.modelList = modelList;</span><br><span class="line">        this._context = _context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</span><br><span class="line">        View v = LayoutInflater.from(_context).inflate(R.layout.row_news, parent, false);</span><br><span class="line">        return new ViewHolder(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(ViewHolder holder, int position) &#123;</span><br><span class="line">        NewsModel currentData = modelList.get(position);</span><br><span class="line">        holder.mNewsAuthor.setText(currentData.getAuthor());</span><br><span class="line">        holder.mNewsTitle.setText(currentData.getTitle());</span><br><span class="line">        holder.mNewsDesc.setText(currentData.getDesc());</span><br><span class="line"></span><br><span class="line">        Picasso.with(_context)</span><br><span class="line">                .load(currentData.getUrlToImage())</span><br><span class="line">                .error(R.drawable.no_image_placeholder)</span><br><span class="line">                .placeholder(R.drawable.no_image_placeholder)</span><br><span class="line">                .into(holder.mNewsImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return modelList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class ViewHolder extends RecyclerView.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">        @BindView(R.id.news_image)</span><br><span class="line">        ImageView mNewsImage;</span><br><span class="line">        @BindView(R.id.news_author)</span><br><span class="line">        TextView mNewsAuthor;</span><br><span class="line">        @BindView(R.id.news_desc)</span><br><span class="line">        TextView mNewsDesc;</span><br><span class="line">        @BindView(R.id.news_title)</span><br><span class="line">        TextView mNewsTitle;</span><br><span class="line"></span><br><span class="line">        public ViewHolder(View itemView) &#123;</span><br><span class="line">            super(itemView);</span><br><span class="line">            ButterKnife.bind(this, itemView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Okay so we get our model, we inserted our data and the adapter class is ready, lets move to linking the data with the list.</p>
<p>Create one method that called <code>addDataToRv( )</code> this method will insert data from db to our adapter and ultimately populate our list. call it after we committing data to realm inside <code>insertDataToRealm( )</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private void addDataToRv()&#123;</span><br><span class="line">        //get all data that available</span><br><span class="line">        RealmResults&lt;NewsModel&gt; newsModels = realm.where(NewsModel.class).findAll();</span><br><span class="line">        //initialize our adapter</span><br><span class="line">        adapter = new NewsAdapter(new ArrayList&lt;&gt;(newsModels), this);</span><br><span class="line">        mRvNewsList.setLayoutManager(new LinearLayoutManager(this));</span><br><span class="line">        mRvNewsList.setAdapter(adapter);</span><br><span class="line">        //notify the adapter that we have new data</span><br><span class="line">        adapter.notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Aaaaaaand you’re done!</p>
<p>All the source code will be posted <a href="https://github.com/nooballday/realm-io-example" target="_blank" rel="noopener">here</a> feel free to ask a question via email.</p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> realm </tag>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/dev-blog/2017/12/07/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<a id="more"></a>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
